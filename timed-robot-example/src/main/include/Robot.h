// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// this is the include file for the robot
// the header files define every variable we will use for the robot
// in terms of using the variables, that will all be done in the .cpp files
// scroll down to the includes and I will explain what they all do

// this is the motor controller we use, rev is the company that makes the motor controllers and it is good
// to check their documentation when it relates to motors
#include <rev/CANSparkMax.h>

#pragma once

#include <string>

// these two are included by default by WPILib, one is everything used in a Timed Robot, the other is the
// smart dashboard which displays what the drivers will see when controlling the robot.
#include <frc/TimedRobot.h>
#include <frc/smartdashboard/SendableChooser.h>

// library to use xbox controllers
#include <frc/XboxController.h>

class Robot : public frc::TimedRobot {
  // these are all generated by default and defines every default method for the robot
 public:

 // when the robot is started
  void RobotInit() override;
  // runs 50 times a second for as long as the robot exists
  void RobotPeriodic() override;
  // runs when autonomous is started
  void AutonomousInit() override;
  // runs 50 times a second for as long as the robot is in automous
  void AutonomousPeriodic() override;
  // runs when teleop is first turned on
  void TeleopInit() override;
  // runs 50 times a second for as long as the robot is in teleop
  void TeleopPeriodic() override;
  // runs when the robot is disabled
  void DisabledInit() override;
  // runs 50 times a second for as long as the robot is disabled
  void DisabledPeriodic() override;
  // runs when the robot is set to test mode
  void TestInit() override;
  // runs 50 times a second when the robot is in test mode
  void TestPeriodic() override;
  // runs once when the robot is started as a simulation
  void SimulationInit() override;
  // runs 50 times a second for as long as a simulated robot exists
  void SimulationPeriodic() override;

 private:
 // defines a chooser
  frc::SendableChooser<std::string> m_chooser;
  // stuff to allow driver to choose what auto to use
  const std::string kAutoNameDefault = "Default";
  const std::string kAutoNameCustom = "My Auto";
  std::string m_autoSelected;

  // these are the first lines that are not auto generated
  // defines our controller as an xbox controller
  // starts with m_ as variables that represent things seen outside the code should be
  frc::XboxController m_controller{1};

  // defines our motor, using the CANSparkMax class
  // putting a {} after the variable name is equal to
  // Class variable = Class{property1, property2}
  // Class variable{property1, property2}
  // the first thing described is what number the motor is in the CAN Bus, for this example it will be 1
  // this can be changed at any time by simply connecting a computer to the motor so it does not matter too much
  // just do not use a number already used somewhere else
  rev::CANSparkMax m_motor1{1, rev::CANSparkMax::MotorType::kBrushless};
  // defines the encoder of the motor
  // the encoder tells us thingss such as the position, rotation, and speed of the motor
  rev::SparkRelativeEncoder m_motor1_encoder = m_motor1.GetEncoder();

  // go to src/main/cpp/Robot.cpp to see how all of these things are implemented.

};
